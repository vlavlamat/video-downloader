#!/usr/bin/env php
<?php

// Enable strict typing
declare(strict_types=1);

// Colors text for colored output in the terminal
function color(string $text, string $colorCode): string
{
    if (stream_isatty(STDOUT)) {
        return "\033[1;{$colorCode}m$text\033[0m";
    }
    return $text;
}

// Prompts the user for input with colored text
function prompt(string $text): string
{
    echo color($text, '36'); // –±–∏—Ä—é–∑–æ–≤—ã–π
    return trim(fgets(STDIN));
}

// Executes a command and returns its output, handling null safely
function runWithOutput(string $command): string
{
    echo color("\n> $command\n", '33'); // –∂—ë–ª—Ç—ã–π
    $output = shell_exec($command);
    return is_string($output) ? trim($output) : '';
}

// Prints a log message with color and timestamp
function colorizedLog(string $message, string $color = '32'): void
{
    echo color("[" . date('Y-m-d H:i:s') . "] $message\n", $color);
}

// Generates a safe new filename by appending _converted before the extension
function getSafeNewFilename(string $original, string $ext): string
{
    $path = pathinfo($original);
    return $path['dirname'] . '/' . $path['filename'] . '_converted.' . $ext;
}

// Detects the MIME type of a file (e.g., video/mp4)
function detectMimeType(string $file): string
{
    return mime_content_type($file) ?: '';
}

// Retrieves video and audio codecs using ffprobe
function getCodecs(string $file): array
{
    $videoCodec = trim(shell_exec("ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=nokey=1:noprint_wrappers=1 " . escapeshellarg($file)) ?? '');
    $audioCodec = trim(shell_exec("ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of default=nokey=1:noprint_wrappers=1 " . escapeshellarg($file)) ?? '');
    return [$videoCodec, $audioCodec];
}

// Creates the downloads directory if it doesn't exist
function getWritableDownloadsDir(): string
{
    $targetDir = getenv("HOME") . "/Downloads/Videos";

    if (!is_dir($targetDir)) {
        if (!mkdir($targetDir, 0777, true) && !is_dir($targetDir)) {
            colorizedLog("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $targetDir", '31');
            exit(1);
        }
    }

    return $targetDir;
}

// === Main logic ===

$downloadsDir = getWritableDownloadsDir();

// Get the URL from the user
$url = prompt("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ");
if (empty($url)) {
    colorizedLog("URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í—ã—Ö–æ–¥.", '31');
    exit(1);
}

// Download the file using yt-dlp and get its path
$escapedUrl = escapeshellarg($url);
$outputTemplate = escapeshellarg($downloadsDir . '/%(title).200B.%(ext)s');
$downloadedFile = runWithOutput("yt-dlp --print after_move:filepath -o $outputTemplate $escapedUrl");

if (empty($downloadedFile) || !file_exists($downloadedFile)) {
    colorizedLog("–û—à–∏–±–∫–∞: yt-dlp –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", '31');
    exit(1);
}

colorizedLog("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: " . basename($downloadedFile));

// Detect MIME type, extension, and codecs
$mime = detectMimeType($downloadedFile);
$ext = strtolower(pathinfo($downloadedFile, PATHINFO_EXTENSION));
[$vCodec, $aCodec] = getCodecs($downloadedFile);
colorizedLog("MIME: $mime | Video codec: $vCodec | Audio codec: $aCodec", '36');

$needsReencoding = false;

// Check if re-encoding is needed: must be mp4 + h264 for video
if (str_starts_with($mime, 'video')) {
    if (!($ext === 'mp4' && $vCodec === 'h264')) {
        $needsReencoding = true;
    }
} else {
    colorizedLog("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ ($mime). –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", '31');
    exit(1);
}

// If no re-encoding is needed, exit
if (!$needsReencoding) {
    colorizedLog("–§–∞–π–ª —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ ($ext) –∏ —Å –Ω—É–∂–Ω—ã–º –∫–æ–¥–µ–∫–æ–º ($vCodec). –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
    exit(0);
}

// Re-encode the file to .mp4 using H.264 and AAC
$newFile = getSafeNewFilename($downloadedFile, 'mp4');
colorizedLog("–ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ mp4 (H.264)...", '34');
runWithOutput("ffmpeg -i " . escapeshellarg($downloadedFile) . " -c:v libx264 -c:a aac -strict experimental " . escapeshellarg($newFile));

// Check result and remove the original file
if (file_exists($newFile)) {
    unlink($downloadedFile);
    colorizedLog("–£–¥–∞–ª—ë–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: " . basename($downloadedFile), '33');
    colorizedLog("üé¨ –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ: " . basename($newFile));
} else {
    colorizedLog("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏. –ù–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.", '31');
    exit(1);
}
